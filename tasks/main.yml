---
- include: mysql.yml
  when: storyboard_install_mysql

- include: rabbitmq.yml
  when: storyboard_install_rabbitmq

# tasks file for ansible-role-storyboard
- name: Set fqdn
  hostname:
    name: "{{ storyboard_fqdn }}"

- name: Copy db_dump file to /tmp
  copy:
    src: "{{ storyboard_db_dump }}"
    dest: /tmp/dump.sql
  when: storyboard_db_dump is defined

- name: Load database dump
  mysql_db:
    state: import
    name: storyboard
    target: /tmp/dump.sql
  when: storyboard_db_dump is defined

- name: Install packages needed from apt
  apt:
    pkg: "{{ item }}"
    state: present
    update-cache: yes
  with_items:
  - libapache2-mod-wsgi
  - curl
  - git
  - python-pip
  - python-dev
  - libmysqlclient-dev

- name: Upgrade pip to latest
  pip:
    name: "{{ item }}"
    extra_args: '--upgrade'
  with_items:
  - pip
  - pbr
  - setuptools
  become: yes

- name: Install apache modules needed
  apache2_module:
    name: "{{ item }}"
    state: present
  with_items:
  - wsgi

- name: create /etc/storyboard
  file:
    path: /etc/storyboard
    state: directory

- name: install storyboard.conf
  template:
    src: storyboard.conf.j2
    dest: /etc/storyboard/storyboard.conf

- name: Clone API sources
  git:
    repo: "{{ storyboard_api_repo }}"
    version: "{{ storyboard_api_version }}"
    dest: "{{ storyboard_src_root_api }}"
    update: yes
    force: yes
  notify:
  - restart apache
  - restart storyboard-workers

- name: Setup virtual environment for the app using requirements.txt
  pip:
    requirements: "{{ storyboard_src_root_api }}/requirements.txt"

- shell: python {{ storyboard_src_root_api }}/setup.py install
  args:
    chdir: "{{ storyboard_src_root_api }}"

- name: Create more folders needed for storyboard and apache2
  file:
    path: "{{ item }}"
    state: directory
    owner: www-data
    group: www-data
  with_items:
  - "{{ storyboard_install_root }}"
  - "{{ storyboard_working_root }}"
  - "{{ storyboard_www_root }}"
  - /var/log/storyboard

- name: Install wsgi of StoryBoard
  command: install -g www-data -o www-data {{ storyboard_src_root_api }}/storyboard/api/app.wsgi {{ storyboard_install_root }}/storyboard.wsgi
  notify: restart apache

- name: Install some deps needed (TODO; investigate if they are really needed)
  pip:
    name: "{{ item }}"
  with_items:
  - oslo.serialization
  - debtcollector
  - webob
  - singledispatch

- name: Migrate the database
  command: storyboard-db-manage --config-file /etc/storyboard/storyboard.conf upgrade head

- name: Install tox
  pip:
    name: tox

- name: Create more folders needed for storyboard-webclient
  file:
    path: "{{ item }}"
    state: directory
    owner: www-data
    group: www-data
  with_items:
  - "{{ storyboard_src_root_webclient }}"

- name: Clone Webclient sources
  git:
    repo: "{{ storyboard_webclient_repo }}"
    version: "{{ storyboard_webclient_version }}"
    dest: "{{ storyboard_src_root_webclient }}"
    update: yes
    force: yes
  become_user: www-data

- name: Set @brand-primary colour
  lineinfile:
    dest: "{{ storyboard_src_root_webclient }}/src/theme/storyboard/theme.less"
    regexp: "^@brand-primary:"
    line: "@brand-primary: #{{ storyboard_brand_primary }};"
    backrefs: yes
  become_user: www-data

- name: Make sure we don't consume all the ram when building the Webclient
  replace:
    dest: "{{ storyboard_src_root_webclient }}/bin/nodeenv.sh"
    regexp: 'nodeenv'
    replace: "nodeenv -j{{ ansible_processor_count }}"
  become_user: www-data

- name: Build the webclient
  command: tox -egrunt_no_api build
  args:
    chdir: "{{ storyboard_src_root_webclient}}"
  become_user: www-data

- name: Create config.json
  shell: echo "{}" > {{ storyboard_src_root_webclient }}/dist/config.json
  args:
    creates: "{{ storyboard_src_root_webclient }}/dist/config.json"
  become_user: www-data

- name: Copy storyboard-webclient into the configured www_root
  shell: cp -r "{{ storyboard_src_root_webclient }}"/dist/* "{{ storyboard_www_root }}"

- copy:
    src: "{{ storyboard_ssl_cert }}"
    dest: "/etc/ssl/certs/{{ storyboard_ssl_cert | basename }}"
  when: storyboard_ssl_cert is defined

- copy:
    src: "{{ storyboard_ssl_key }}"
    dest: "/etc/ssl/private/{{ storyboard_ssl_key | basename }}"
  when: storyboard_ssl_key is defined

- copy:
    src: "{{ storyboard_resolved_ssl_ca }}"
    dest: "/etc/ssl/certs/{{ storyboard_resolved_ssl_ca | basename }}"
  when: storyboard_resolved_ssl_ca is defined

- set_fact:
    storyboard_vhost_protocol: http
  when: storyboard_ssl_cert is not defined or storyboard_ssl_key is not defined

- set_fact:
    storyboard_vhost_protocol: https
  when: storyboard_ssl_cert is defined and storyboard_ssl_key is defined

- name: install Virtualhost for storyboard
  template:
    src: storyboard_{{ storyboard_vhost_protocol }}.vhost.j2
    dest: /etc/apache2/sites-available/vhost-storyboard.conf
  notify:
  - restart apache
  - restart storyboard-workers

- name: enable storyboard Virtualhost
  file:
    src: ../sites-available/vhost-storyboard.conf
    dest: /etc/apache2/sites-enabled/vhost-storyboard.conf
    state: link
  notify: restart apache

- name: Set up Systemd configuration for StoryBoard workers
  template:
    src: storyboard-workers.service.j2
    dest: /etc/systemd/system/storyboard-workers.service
    mode: 0644
  when: ansible_service_mgr is defined and ansible_service_mgr == "systemd"
  notify:
  - restart storyboard-workers

- name: Set up Upstart configuration for StoryBoard workers
  template:
    src: storyboard-workers.conf.j2
    dest: /etc/init/storyboard-workers.conf
    mode: 0644
  when: storyboard_use_upstart and (ansible_service_mgr is undefined or ansible_service_mgr != "systemd")
  notify:
  - restart storyboard-workers

- name: Remove SysV configuration when using Upstart
  file:
    path: /etc/init.d/storyboard-workers
    state: absent
  when: storyboard_use_upstart and (ansible_service_mgr is undefined or ansible_service_mgr != "systemd")

- name: Set up SysVinit configuration for StoryBoard workers
  template:
    src: storyboard-workers.sh.j2
    dest: /etc/init.d/storyboard-workers
    mode: 0755
  when: not storyboard_use_upstart and (ansible_service_mgr is undefined or ansible_service_mgr != "systemd")
  notify:
  - restart storyboard-workers

- name: Remove Upstart configuration when using SysV
  file:
    path: /etc/init/storyboard-workers.conf
    state: absent
  when: not storyboard_use_upstart and (ansible_service_mgr is undefined or ansible_service_mgr != "systemd")

- name: Start storyboard-workers service
  service:
    name: storyboard-workers
    state: started

- name: Copy projects file to /tmp
  copy:
    src: "{{ storyboard_projects }}"
    dest: /tmp/projects.yaml
  when: storyboard_projects is defined

- name: Set up projects
  command: storyboard-db-manage --config-file /etc/storyboard/storyboard.conf load_projects /tmp/projects.yaml
  become_user: www-data
  when: storyboard_projects is defined

- name: Copy superusers file to /tmp
  copy:
    src: "{{ storyboard_superusers }}"
    dest: /tmp/superusers.yaml
  when: storyboard_superusers is defined

- name: Set up superusers
  command: storyboard-db-manage --config-file /etc/storyboard/storyboard.conf load_superusers /tmp/superusers.yaml
  become_user: www-data
  when: storyboard_superusers is defined
