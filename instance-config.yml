# Instance-specific configuration for the baserock.org StoryBoard system.
- hosts: storyboard
  vars_files:
  - vars.yml
  sudo: yes
  roles:
  - { role: geerlingguy.apache }
  - { role: Mayeu.RabbitMQ }
  - { role: geerlingguy.mysql, when: mysql_host == 'localhost' }

  tasks:

  - name: Install packages needed from apt
    apt:
      pkg: "{{ item }}"
      state: present
      update-cache: yes
    with_items:
    - libapache2-mod-wsgi
    - curl
    - git
    - python-pip
    - python-dev

  - name: Install apache modules needed
    apache2_module:
      name: "{{ item }}"
      state: present
    with_items:
    - wsgi


  - name: create /etc/storyboard
    file:
      path: /etc/storyboard
      state: directory

  - name: install storyboard.conf
    template:
      src: templates/storyboard.conf
      dest: /etc/storyboard/storyboard.conf

  - git:
      repo: https://github.com/openstack-infra/storyboard
      dest: "{{ src_root_api }}"
      update: yes

  - name: Setup virtual environment for the app using requirements.txt
    pip:
      requirements: "{{ src_root_api }}/requirements.txt"

  - shell: python {{ src_root_api }}/setup.py install
    args:
      chdir: "{{ src_root_api }}"

  - name: Create more folders needed for storyboard and apache2
    file:
      path: "{{ item }}"
      state: directory
      owner: www-data
      group: www-data
    with_items:
    - "{{ install_root }}"
    - "{{ working_root }}"
    - /var/log/storyboard

  - name: Install wsgi of StoryBoard
    command: install -g www-data -o www-data {{ src_root_api }}/storyboard/api/app.wsgi {{ install_root }}/storyboard.wsgi

  - name: DEPS NEEDED?
    pip:
      name: "{{ item }}"
    with_items:
    - oslo.serialization
    - debtcollector
    - webob
    - singledispatch

  - name: Migrate the database
    command: storyboard-db-manage --config-file /etc/storyboard/storyboard.conf upgrade head
#  - name: Install puppet and git
#    apt:
#      name: "{{ item }}"
#    with_items:
#    - puppet
#    - git
#
#  - git:
#      repo: https://github.com/openstack-infra/puppet-storyboard
#      dest: /home/ubuntu/sb-puppet
#      update: yes
#
#      user:
#        name: gerrit
#        shell: /bin/false
#        generate_ssh_key: yes
#        ssh_key_comment: gerrit@baserock.org
#
#    - name: unpack the Java Runtime Environment
#      unarchive: src={{ JRE_FILE }} dest=/opt owner=root group=root creates={{ JRE_DIR }}
#
#    # The Java Cryptography Extensions are needed in order to enable all SSH
#    # ciphers, due to US export restrictions.
#    - name: unpack the Java Cryptography Extensions
#      unarchive: src={{ JCE_FILE }} dest=/opt owner=root group=root creates=/opt/#UnlimitedJCEPolicyJDK8/
#
#    - name: install the Java Cryptography Extensions
#      file: src=/opt/UnlimitedJCEPolicyJDK8/{{ item }} dest={{ JRE_DIR }}/jre/lib/security/#{{ item }} state=link force=yes
#      with_items:
#        - local_policy.jar
#        - US_export_policy.jar
#
#    - name: create /opt/gerrit
#      file: path=/opt/gerrit state=directory
#
#    - name: download Gerrit
#      get_url:
#        url: https://gerrit-releases.storage.googleapis.com/gerrit-{{ GERRIT_VERSION }}.war
#        dest: /opt/gerrit/gerrit-{{ GERRIT_VERSION }}.war
#
#    - include: ../tasks/create-data-volume.yml lv_name=gerrit lv_size=25g mountpoint=/srv/gerrit
#
#    - name: ensure 'gerrit' user owns /srv/gerrit
#      file: path=/srv/gerrit owner=gerrit group=gerrit state=directory
#
#    - name: initialise Gerrit application directory
#      command: "{{ run_gerrit }} init -d /srv/gerrit creates=/srv/gerrit/etc/gerrit.config"
#      sudo: yes
#      sudo_user: gerrit
#
#    - name: extract and install some plugins for gerrit
#      shell: unzip /opt/gerrit/gerrit-{{ GERRIT_VERSION}}.war WEB-INF/plugins/{{ item }}.jar -p > /srv/gerrit/plugins/{{ item }}.jar
#      args:
#        creates: /srv/gerrit/plugins/{{ item }}.jar
#      with_items:
#        - replication
#        - download-commands
#      sudo: yes
#      sudo_user: gerrit
#
#     # WARNING Non core plugins are not compiled inside gerrit.war file, we need to
#     # download them from somwhere else (https://gerrit-ci.gerritforge.com/ or
#     # http://builds.quelltextlich.at/gerrit/nightly/index.html).
#     #
#     # We install them from there, but some of the plugins don't have an stable branch for
#     # a given gerrit version. Check before runnig this script that this task
#     # is pointing to the right version (API compatible) of the plugin
#    - name: install non-core plugins for gerrit
#      shell: wget https://gerrit-ci.gerritforge.com/job/plugin-{{ item }}-master/lastBuild/artifact/buck-out/gen/plugins/{{ item }}/{{ item }}.jar -O /srv/gerrit/plugins/{{ item }}.jar
#      args:
#        creates: /srv/gerrit/plugins/{{ item }}.jar
#      with_items:
#        - avatars-gravatar
#      sudo: yes
#      sudo_user: gerrit
#
#   - name: download extra Java libraries
#     get_url:
#        url: "{{ item }}"
#        dest: /srv/gerrit/lib
#      with_items:
#        # MySQL Java Connector
#        - http://repo2.maven.org/maven2/mysql/mysql-connector-java/5.1.21/mysql-connector-java-5.1.21.jar
#
#        # Bouncy Castle Crypto APIs for Java. The interactive `gerrit init`
#        # command recommends installing these libraries, and who am I to argue?
#        - http://www.bouncycastle.org/download/bcpkix-jdk15on-149.jar
#        - http://www.bouncycastle.org/download/bcprov-jdk15on-149.jar
#
#    - name: install gerrit.config
#     template: src=gerrit.config dest=/srv/gerrit/etc/gerrit.config
#
#    - name: set database password
#      command: git config -f /srv/gerrit/etc/secure.config database.password "{{ baserock_gerrit_password }}"
#      sudo: yes
#      sudo_user: gerrit
#
#    - name: install gerrit.service
#      template: src=gerrit.service dest=/etc/systemd/system/gerrit.service
#
#    - name: start Gerrit service
#      service: name=gerrit enabled=yes state=restarted
